{"/home/travis/build/npmtest/node-npmtest-main-bower-files/test.js":"/* istanbul instrument in package npmtest_main_bower_files */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-main-bower-files/lib.npmtest_main_bower_files.js":"/* istanbul instrument in package npmtest_main_bower_files */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_main_bower_files = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_main_bower_files = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-main-bower-files/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-main-bower-files && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_main_bower_files */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_main_bower_files\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_main_bower_files.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_main_bower_files.rollup.js'] =\n            local.assetsDict['/assets.npmtest_main_bower_files.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_main_bower_files.__dirname +\n                    '/lib.npmtest_main_bower_files.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-main-bower-files/node_modules/main-bower-files/index.js":"module.exports = process.env.LIB_COV ? require('./lib-cov') : require('./lib');\n","/home/travis/build/npmtest/node-npmtest-main-bower-files/node_modules/main-bower-files/lib/index.js":"var readFile           = require('fs').readFileSync,\n    exists             = require('path-exists').sync,\n    path               = require('path'),\n    multimatch         = require('multimatch'),\n    PackageCollection  = require('./package_collection');\n\nmodule.exports = function(filter, opts, cb) {\n    var collection,\n        files,\n        config,\n        bowerrc,\n        bowerJson,\n        bowerDirectory,\n        cwd = process.cwd(),\n        error;\n\n    if (typeof filter === 'function') {\n        cb = filter\n        opts = null;\n        filter = null;\n    } else if (typeof filter !== 'string' && Array.isArray(filter) === false && !(filter instanceof RegExp)) {\n        if (typeof opts === 'function') {\n            cb = opts;\n        }\n        opts = filter;\n        filter = null;\n    } else if (typeof opts === 'function') {\n        cb = opts;\n        opts = null;\n    }\n\n    if (typeof cb !== 'function') {\n        cb = null;\n    }\n\n    opts = opts || {};\n    opts.paths = opts.paths || {};\n    opts.filter = opts.filter || filter;\n\n    if (typeof opts.paths === 'string') {\n        cwd = path.resolve(cwd, opts.paths);\n    } else {\n        bowerrc = opts.paths.bowerrc;\n    }\n\n    bowerrc = path.resolve(cwd, bowerrc || '.bowerrc');\n\n    if (exists(bowerrc) && (config = JSON.parse(readFile(bowerrc, 'utf-8')))) {\n        cwd = path.dirname(bowerrc);\n        if (config.cwd) {\n            cwd = path.resolve(cwd, config.cwd);\n        }\n        if (config.directory) {\n            bowerDirectory = config.directory;\n        }\n    }\n\n    bowerJson = opts.paths.bowerJson ? path.resolve(process.cwd(), opts.paths.bowerJson)\n                                     : path.resolve(cwd, bowerJson || 'bower.json');\n\n    bowerDirectory = opts.paths.bowerDirectory ?\n        path.resolve(process.cwd(), opts.paths.bowerDirectory) :\n        path.resolve(cwd, bowerDirectory || 'bower_components');\n\n    if (!bowerJson || !exists(bowerJson)) {\n        error = Error('bower.json file does not exist at ' + bowerJson);\n        if (cb) {\n            cb(error, []);\n            return [];\n        } else {\n            throw error;\n        }\n    }\n\n    if (!bowerDirectory || !exists(bowerDirectory)) {\n        error = Error('Bower components directory does not exist at ' + bowerDirectory);\n        if (cb) {\n            cb(error, []);\n            return [];\n        } else {\n            throw error;\n        }\n    }\n\n    opts.base = opts.base || bowerDirectory;\n    opts.includeDev = opts.includeDev || false;\n    opts.includeSelf = opts.includeSelf || false;\n    opts.paths = {\n        bowerJson: bowerJson,\n        bowerDirectory: bowerDirectory\n    };\n\n    try {\n        collection = new PackageCollection(opts);\n        files = collection.getFiles();\n\n        if (typeof opts.filter === 'string' || Array.isArray(opts.filter)) {\n            files = multimatch(files, opts.filter, {dot: true});\n        } else if (opts.filter instanceof RegExp) {\n            files = files.filter(function(file) {\n                return opts.filter.test(file);\n            });\n        } else if (typeof opts.filter === 'function') {\n            files = files.filter(opts.filter);\n        }\n    } catch (e) {\n        if (cb) {\n            cb(e, []);\n            return [];\n        } else {\n            throw e;\n        }\n    }\n\n    if (cb) {\n        cb(null, files || [])\n    }\n\n    return files || [];\n};\n","/home/travis/build/npmtest/node-npmtest-main-bower-files/node_modules/main-bower-files/lib/package_collection.js":"var path                = require('path'),\n    readFile            = require('fs').readFileSync,\n    exists              = require('path-exists').sync,\n    stripJsonComments   = require('strip-json-comments'),\n    extend              = require('extend'),\n    Package             = require('./package'),\n    logger              = require('./logger');\n\n/**\n * Collection for bower packages\n *\n * @class PackageCollection\n */\n\n/**\n * @constructor\n * @param {Object} opts\n */\nfunction PackageCollection(opts) {\n    this.opts               = opts;\n    this.opts.main          = opts.main || null;\n    this.opts.env           = opts.env || process.env.NODE_ENV;\n    this.debugging          = opts.debugging || false;\n    this.overrides          = opts.overrides || {};\n    this._queue             = [];\n    this._lastQueueLength   = 0;\n    this._packages          = {};\n    this._processed         = {};\n\n    this.collectPackages();\n};\n\nPackageCollection.prototype = {\n    /**\n     * Adds a package to the collection\n     *\n     * @param {String} name Name of the package\n     * @param {String} path Path to the package files\n     */\n    add: function(name, path, main) {\n        if (this._packages[name]) {\n            return;\n        }\n\n        if (this.debugging) {\n            logger('PackageCollection', 'add', name, path);\n        }\n\n        this._packages[name] = true;\n\n        var opts = this.overrides[name] || {};\n        opts.name = name;\n        opts.path = path;\n        if (path.indexOf(this.opts.paths.bowerDirectory) === -1) {\n            opts.main = main || name;\n        }\n        opts.path = path;\n\n        this._packages[name] = new Package(opts, this);\n    },\n\n    /**\n     * Collects all packages\n     */\n    collectPackages: function() {\n        if (!exists(this.opts.paths.bowerJson)) {\n            throw new Error('bower.json does not exist at: ' + this.opts.paths.bowerJson);\n        }\n\n        var name,\n            group = this.opts.group || null,\n            includeDev = this.opts.includeDev || false,\n            includeSelf = this.opts.includeSelf || false,\n            bowerJson = JSON.parse(stripJsonComments(readFile(this.opts.paths.bowerJson, 'utf8'))),\n            devDependencies = bowerJson.devDependencies || {},\n            dependencies = bowerJson.dependencies || {},\n            main = bowerJson.main || {};\n\n        includeDev = includeDev === true ? 'inclusive' : includeDev;\n\n        this.overrides = extend(bowerJson.overrides || {}, this.overrides);\n\n        this.checkGroupExists(group, bowerJson, function (missingGroup) {\n            throw new Error('group \"' + missingGroup + '\" does not exists in bower.json');\n        });\n\n        if (includeDev !== 'exclusive') {\n            this.addDependencies(dependencies, group, bowerJson);\n        }\n\n        if (includeDev !== false) {\n            this.addDependencies(devDependencies, group, bowerJson);\n        }\n\n        if (includeSelf !== false) {\n            this.add(bowerJson.name || 'self', path.dirname(this.opts.paths.bowerJson), main);\n        }\n    },\n\n    /**\n     * Adds all dependencies from list filtered by group\n     *\n     */\n    addDependencies: function (dependencies, group, bowerJson) {\n        if (typeof dependencies !== \"string\") {\n            var deps = (!!group) ? this.filterByGroup(dependencies, group, bowerJson) : dependencies;\n\n            for (var name in deps) {\n                this.add(name, path.join(this.opts.paths.bowerDirectory, path.sep, name));\n            }\n        } else {\n            this.add(dependencies, path.join(path.dirname(this.opts.paths.bowerJson)));\n        }\n    },\n\n    /**\n     * Filters dependencies by group\n     *\n     * @return {Object}\n     */\n    filterByGroup: function (deps, group, bowerJson) {\n        var filtered = {};\n\n        if (typeof group === \"string\") {\n            var isExludingGroup = (group && bowerJson.group && group.charAt(0) === \"!\" && bowerJson.group[group.slice(1)].length > 0);\n\n            for (var dep in deps) {\n                if (isExludingGroup && bowerJson.group[group.slice(1)].indexOf(dep) === -1) {\n                    filtered[dep] = deps[dep];\n                }\n                if (!isExludingGroup && bowerJson.group[group].indexOf(dep) >= 0) {\n                    filtered[dep] = deps[dep];\n                }\n            }\n\n            return filtered;\n        }\n\n        if (typeof group === \"object\") {\n            for (var i = 0; i < group.length; i++) {\n                filtered = extend(filtered, this.filterByGroup(deps, group[i], bowerJson));\n            }\n        }\n\n        return filtered;\n    },\n\n    /**\n     * Calls error method if group doesn't exist\n     */\n    checkGroupExists: function (group, bowerJson, error) {\n        if(!group || !bowerJson.group) {\n            return;\n        }\n\n        if (typeof group === \"string\") {\n            var isExludingGroup = (group && bowerJson.group && group.charAt(0) === \"!\" && bowerJson.group[group.slice(1)].length > 0);\n\n            if(!bowerJson.group[group] && !isExludingGroup) {\n                error(group);\n\n                return;\n            }\n\n            return bowerJson.group[group];\n        }\n\n        if (typeof group === \"object\") {\n            for (var i = 0; i < group.length; i++) {\n                this.checkGroupExists(group[i], bowerJson, error);\n            }\n        }\n    },\n\n    /**\n     * Get srcs of all packages\n     *\n     * @return {Array}\n     */\n    getFiles: function() {\n        for (var name in this._packages) {\n            this._queue.push(this._packages[name]);\n        }\n\n        return this.process();\n    },\n\n    /**\n     * processes the queue and returns the srcs of all packages\n     *\n     * @private\n     * @return {Array}\n     */\n    process: function() {\n        var queue = this._queue,\n            srcs = [],\n            force = false;\n\n        if (this._lastQueueLength === queue.length) {\n            force = true;\n        }\n\n        this._lastQueueLength = queue.length;\n\n        this._queue = [];\n\n        queue.forEach(function(package) {\n            var packageSrcs = package.getFiles(force);\n\n            if (packageSrcs === false) {\n                return this._queue.push(package);\n            }\n\n            srcs.push.apply(srcs, packageSrcs);\n            this._processed[package.name] = true;\n        }, this);\n\n        if (this._queue.length) {\n            srcs.push.apply(srcs, this.process());\n        }\n\n        return srcs;\n    }\n};\n\nmodule.exports = PackageCollection;\n","/home/travis/build/npmtest/node-npmtest-main-bower-files/node_modules/main-bower-files/lib/package.js":"var path     = require('path'),\n    readFile = require('fs').readFileSync,\n    exists   = require('path-exists').sync,\n    globby   = require('globby').sync,\n    logger   = require('./logger');\n\n/**\n * Holds information of the bower package\n *\n * @class Package\n */\n\n/**\n * @constructor\n * @param {Object}              opts\n * @param {PackageCollection}   collection\n */\nfunction Package(opts, collection) {\n    this.collection     = collection;\n    this.name           = opts.name || null;\n    this.path           = opts.path || null;\n    this.main           = opts.main || null;\n    this.dependencies   = opts.dependencies;\n    this.ignore         = opts.ignore || false;\n    this.debugging      = collection.debugging || false;\n\n    if (this.ignore) {\n        return;\n    }\n\n    this.collectData();\n    this.addDependencies();\n};\n\nPackage.prototype = {\n    /**\n     * Collects data from first found config file\n     */\n    collectData: function() {\n        var paths = [\n                path.join(this.path, '.bower.json'),\n                path.join(this.path, 'bower.json'),\n                path.join(this.path, 'package.json'),\n                path.join(this.path, 'component.json')\n            ],\n            data = paths.reduce(function(prev, curr) {\n                if (prev && prev.main) {\n                    return prev;\n                }\n\n                if (!exists(curr)) {\n                    return prev;\n                }\n\n                try {\n                    return JSON.parse(readFile(curr, 'utf8'));\n                } catch (e) {\n                    return null;\n                }\n            }, null);\n\n        if (!data) {\n            return;\n        }\n\n        if (!this.main && data.main) {\n            this.main = data.main;\n\n            if (this.debugging) {\n                logger('Package', 'overriding main', this.name, data.main);\n            }\n        }\n\n        if (!this.main && this.collection.opts.checkExistence) {\n            throw new Error('Main property of package \"' + this.name + '\" is missing.');\n        }\n\n        if (this.dependencies === undefined && data.dependencies && data.dependencies) {\n            this.dependencies = data.dependencies;\n\n            if (this.debugging) {\n                logger('Package', 'overriding dependencies', this.name, data.dependencies);\n            }\n        }\n    },\n\n    /**\n     * Adds package dependencies to the collection\n     */\n    addDependencies: function() {\n        for (var name in this.dependencies) {\n            this.collection.add(name, path.join(this.path, '..', name));\n        }\n    },\n\n    /**\n     * Gets main files of the package\n     *\n     * @param  {Boolean}\n     *      force  If true it will not wait for the dependencies\n     * @return {Mixed}\n     *      Returns false if the package has dependencies which were not\n     *      processed yet otherwise an array of file paths\n     */\n    getFiles: function(force) {\n        var main = this.main = this.main || this.collection.opts.main,\n            files = [],\n            name;\n\n        if (main && typeof main === 'object' && !Array.isArray(main)) {\n            main = main[this.collection.opts.env];\n        }\n\n        if (this.ignore || !main) {\n            return files;\n        }\n\n        if (!Array.isArray(main)) {\n            main = [main];\n        }\n\n        if (force !== true) {\n            for (name in this.dependencies) {\n                if (this.collection._processed[name] !== true) {\n                    return false;\n                }\n            }\n        }\n\n        main.forEach(function(pattern) {\n            if (pattern[0] === '/') {\n                throw new Error('absolute path in bower main is not supported');\n            }\n\n            var _files = globby(pattern, {\n                cwd: this.path\n            });\n\n            if (!_files.length && this.collection.opts.checkExistence) {\n                throw new Error('File on path \"' + path.join(this.path, pattern) +\n                    '\" does not exist.');\n            }\n\n            _files.forEach(function(file) {\n                files.push(path.join(this.path, file));\n            }, this);\n        }, this);\n\n        if (this.debugging) {\n            files.forEach(function(file) {\n                logger('Package', 'select file', this.name, file);\n            }, this);\n        }\n\n        return files;\n    }\n};\n\nmodule.exports = Package;\n","/home/travis/build/npmtest/node-npmtest-main-bower-files/node_modules/main-bower-files/lib/logger.js":"var chalk = require('chalk'),\n    colors = ['magenta', 'green', 'blue', 'grey', 'yellow'],\n    widths = [18, 24, 18, 0, 0];\n\nmodule.exports = function() {\n    var args = [].map.call(arguments, function(val, i) {\n        val = typeof val === 'object' ? JSON.stringify(val) : val;\n        val = width(val, widths[i]);\n        val = chalk[colors[i]](val);\n\n        return val;\n    });\n\n    console.log.apply(null, args);\n};\n\nfunction width(str, count) {\n    if (str.length < count) {\n        str += new Array(count - str.length).join(' ');\n    }\n\n    return str;\n}\n","/home/travis/build/npmtest/node-npmtest-main-bower-files/node_modules/main-bower-files/tasks/main-bower-files.js":"'use strict';\n\nmodule.exports = function(grunt) {\n    var mainBowerFiles = require('..');\n    var vfs = require('vinyl-fs');\n\n    grunt.registerMultiTask('bower', 'Copy Bower packages to the destination folder.', function() {\n        var done = this.async();\n        var options = this.options() || {};\n        var targets = (this.file) ? [this.file] : this.files;\n\n        targets.forEach(function(target) {\n            var base = target.base;\n            var dest = target.dest;\n\n            vfs.src(mainBowerFiles(options), {base: base})\n                .pipe(vfs.dest(dest))\n                .on('end', function() {\n                    done();\n                });\n        });\n    });\n};\n"}